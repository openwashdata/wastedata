library(washr)
setup_rawdata()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(maps)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/wfp waste survey.csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
wastedata <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(wastedata, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(wastedata,
here::here("inst", "extdata", paste0("wastedata", ".csv")))
openxlsx::write.xlsx(wastedata,
here::here("inst", "extdata", paste0("wastedata",
".xlsx")))
setup_dictionary()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(maps)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/wfp waste survey.csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
wastedata <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(wastedata, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(wastedata,
here::here("inst", "extdata", paste0("wastedata", ".csv")))
openxlsx::write.xlsx(wastedata,
here::here("inst", "extdata", paste0("wastedata",
".xlsx")))
setup_dictionary()
setup_dictionary()
setup_roxygen()
devtools::document()
devtools::check()
devtools::install()
use_author(
given = "Emmanuel",
family = "Mhango",
role = c("aut", "cre"),
email = "emmanuellmhango@gmail.com",
comment = c(ORCID = "0000-0003-3197-6244")
)
add_creator(name="Emmanuel Mhango", email="emmanuellmhango@gmail.com", affiliation="Openwashdata")
use_author(given = "Samuel", family = "Chinkhungwa", role = "ctb")
use_author(given = "A", family = "Kandodo", role = "ctb")
use_author(given = "Richard", family = "Martin", role = "ctb")
use_author(given = "John", family = "Madzifewe", role = "ctb")
use_author(given = "Richard", family = "Nkhoma", role = "ctb")
use_author(given = "Paul", family = "Jofilisi", role = "ctb")
use_author(given = "Joel", family = "Kalavina", role = "ctb")
use_author(given = "Paul", family = "Bello", role = "ctb")
use_author(given = "Glaciano", family = "Mafikeni", role = "ctb")
use_author(given = "John", family = "Chilapula", role = "ctb")
use_author(given = "Coloyzo", family = "Daka", role = "ctb")
use_author(given = "Unique", family = "Chiumia", role = "ctb")
use_author(given = "Chibinda", family = "Mziza", role = "ctb")
use_author(given = "Dyson", family = "Mantchichi", role = "ctb")
use_author(given = "Ian", family = "Thipa", role = "ctb")
use_author(given = "Susan", family = "Sidzapanja", role = "ctb")
use_author(given = "Winter", family = "Chaguluka", role = "ctb")
use_author(given = "G.L", family = "Mwanapwa", role = "ctb")
use_author(given = "Ernest", family = "Kanjedza", role = "ctb")
use_author(given = "Maston", family = "Mbendera", role = "ctb")
use_author(given = "P", family = "Malango", role = "ctb")
use_author(given = "Faela", family = "Kachulu", role = "ctb")
use_author(given = "Davie", family = "Selenje", role = "ctb")
use_author(given = "Mable", family = "Chiphaliwali", role = "ctb")
use_author(given = "Tumwe", family = "Mapunda", role = "ctb")
use_author(given = "David", family = "Chimbalu", role = "ctb")
use_author(given = "Lloyd", family = "Chauwa", role = "ctb")
use_author(given = "William", family = "Mandala", role = "ctb")
update_description()
add_metadata()
update_metadata()
add_creator(name="Emmanuel Mhango", email="emmanuellmhango@gmail.com", affiliation="Openwashdata")
generate_jsonld()
devtools::document()
devtools::check()
devtools::install()
setup_readme()
# Load libraries
library(ggplot2)
library(dplyr)
# Prepare data
status_data <- wastedata %>%
mutate(waste_active = case_when(
is.na(waste_active) ~ "Not Known",
waste_active == "" ~ "Not Known",
TRUE ~ waste_active
)) %>%
group_by(waste_active) %>%
summarise(count = n()) %>%
ungroup()
# Create pie chart
ggplot(status_data, aes(x = "", y = count, fill = waste_active)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Operational Status of Waste Sites",
fill = "Waste Active") +
theme_void() +
geom_text(aes(label = paste0(waste_active, ": ", count)),
position = position_stack(vjust = 0.5))
# Load libraries
library(ggplot2)
library(dplyr)
# Assuming your dataset is called df
# Replace NA or blank in waste_active
df <- wastedata %>%
mutate(waste_active = case_when(
is.na(waste_active) | waste_active == "" ~ "Not Known",
TRUE ~ waste_active
))
# Basic map with latitude and longitude
ggplot(df, aes(x = longitude, y = latitude, color = waste_active)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Geospatial Distribution of Waste Sites",
x = "Longitude",
y = "Latitude",
color = "Waste Active Status") +
theme_minimal() +
coord_fixed()  # keeps map proportions correct
#=============================================================================
# Load required libraries
library(ggplot2)
library(maps)
library(dplyr)
# Prepare data: handle NA in waste_active
df <- wastedata %>%
mutate(waste_active = case_when(
is.na(waste_active) | waste_active == "" ~ "Not Known",
TRUE ~ waste_active
))
# Get Malawi map from maps package
malawi_map <- map_data("world", region = "Malawi")
# Plot map with waste site points
ggplot() +
# Draw Malawi boundaries
geom_polygon(data = malawi_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = "black") +
# Overlay waste site points
geom_point(data = df, aes(x = longitude, y = latitude, color = waste_active),
size = 3, alpha = 0.7) +
scale_color_manual(values = c("Yes" = "green", "No" = "red", "Not Known" = "gray")) +
labs(title = "Geospatial Distribution of Waste Sites in Malawi",
x = "Longitude", y = "Latitude",
color = "Waste Active Status") +
theme_minimal()
# Load libraries
library(ggplot2)
library(dplyr)
# Prepare data: replace NA or blanks with "Not Known"
df <- wastedata %>%
mutate(
waste_state = case_when(
is.na(waste_state) | waste_state == "" ~ "Not Known",
TRUE ~ waste_state
),
waste_category = case_when(
is.na(waste_category) | waste_category == "" ~ "Not Known",
TRUE ~ waste_category
)
)
# Aggregate counts
waste_counts <- df %>%
group_by(waste_category, waste_state) %>%
summarise(count = n()) %>%
ungroup()
# Create stacked bar chart
ggplot(waste_counts, aes(x = waste_category, y = count, fill = waste_state)) +
geom_bar(stat = "identity") +
labs(title = "Waste Types by Category",
x = "Waste Category",
y = "Number of Sites",
fill = "Waste State") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# Prepare data
df_clean <- wastedata %>%
mutate(
waste_state_grouped = case_when(
grepl("solid", tolower(waste_state)) ~ "Solid waste",
grepl("liquid", tolower(waste_state)) ~ "Liquid waste",
TRUE ~ "Unknown"
),
waste_category_clean = case_when(
is.na(waste_category) | waste_category == "" ~ "Unknown",
tolower(waste_category) %in% c("not known", "unknown") ~ "Unknown",
TRUE ~ waste_category
)
) %>%
# Remove duplicates of the same site per category/state combination
distinct(submitted_on, latitude, longitude, waste_category_clean, waste_state_grouped)
# Aggregate counts
waste_counts <- df_clean %>%
group_by(waste_category_clean, waste_state_grouped) %>%
summarise(count = n(), .groups = "drop")
# Plot stacked bar chart
ggplot(waste_counts, aes(x = waste_category_clean, y = count, fill = waste_state_grouped)) +
geom_bar(stat = "identity") +
labs(title = "Waste Types by Category",
x = "Waste Category",
y = "Number of Sites",
fill = "Waste State") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# Step 1: Clean and prepare the data
df_clean <- wastedata %>%
mutate(
# Group waste_state into Solid, Liquid, or Unknown
waste_state_grouped = case_when(
grepl("solid", tolower(waste_state)) ~ "Solid waste",
grepl("liquid", tolower(waste_state)) ~ "Liquid waste",
TRUE ~ "Unknown"   # Combines Not Known, NA, or anything else into Unknown
),
# Standardize waste_category, combining Not Known and Unknown
waste_category_clean = case_when(
is.na(waste_category) | waste_category == "" ~ "Unknown",
tolower(waste_category) %in% c("not known", "unknown") ~ "Unknown",
TRUE ~ waste_category
)
) %>%
# Ensure no duplicate site entries per category/state combination
distinct(submitted_on, latitude, longitude, waste_category_clean, waste_state_grouped)
# Step 2: Aggregate counts for each category-state combination
waste_counts <- df_clean %>%
group_by(waste_category_clean, waste_state_grouped) %>%
summarise(count = n(), .groups = "drop")
# Step 3: Create stacked bar chart
ggplot(waste_counts, aes(x = waste_category_clean, y = count, fill = waste_state_grouped)) +
geom_bar(stat = "identity") +  # Use identity since we already counted
labs(
title = "Waste Types by Category",
x = "Waste Category",
y = "Number of Sites",
fill = "Waste State"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Export Data ------------------------------------------------------------------
usethis::use_data(wastedata, overwrite = TRUE)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
setup_website()
devtools::document()
devtools::check()
devtools::install()
devtools::build_readme()
setup_website()
devtools::document()
devtools::check()
devtools::install()
install.packages("styler")
styler:::set_style_transformers()
